version: 2.1

commands:
  build:
    parameters:
      cc:
        type: string
      cxx:
        type: string
      cmake:
        type: string
    steps:
      - checkout:
          path: code
      - run:
          name: Configure
          command: export CC=<< parameters.cc >> CXX=<< parameters.cxx >> && mkdir build && cd build && << parameters.cmake >> ../code -DPYTHON_EXECUTABLE=${PYTHON} -GNinja
      - run:
          name: Compile
          command: cd build && ninja -j2

  test:
    steps:
      - run:
          name: Unit test
          command: mkdir test-results && cd code/tests && ${PYTEST} --junit-xml=/home/ci/project/test-results/test.xml --ignore-glob='*_largefile.py'
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results

  sphinx:
    steps:
      - run: cd code/doc && sphinx-build -b html -d _build/doctrees -W -n . _build/html


jobs:
  pypi-linux-wheels:
    parameters:
      python:
        type: string
      upload-package:
        type: boolean
        default: false
      run-tests:
        type: boolean
        default: true
      build-sdist:
        type: boolean
        default: false
    docker:
      - image: quay.io/pypa/manylinux1_x86_64
    environment:
      PYBIN: "/opt/python/<< parameters.python >>/bin"
    steps:
      - run:
          name: Install software
          working_directory: /root/code
          command: yum install -y openssh-clients
      - run:
          name: Checkout repository
          command: |
            cd /root
            git clone https://github.com/glotzerlab/${CIRCLE_PROJECT_REPONAME} code
            cd code
            if [ -n "$CIRCLE_TAG" ]
            then
              git reset --hard "$CIRCLE_SHA1"
              git checkout -q "$CIRCLE_TAG"
            elif [ -n "$CIRCLE_BRANCH" ]
            then
              git reset --hard "$CIRCLE_SHA1"
              git checkout -q -B "$CIRCLE_BRANCH"
            fi
      - run:
          name: Build numpy
          working_directory: /
          command: |
            "${PYBIN}/python" -m pip install cython --no-deps --ignore-installed -q --progress-bar=off
            curl -sSLO https://github.com/numpy/numpy/archive/v1.9.3.tar.gz
            tar -xzf v1.9.3.tar.gz
            cd numpy-1.9.3
            rm -f numpy/random/mtrand/mtrand.c
            rm -f PKG-INFO
            "${PYBIN}/python" -m pip install . --no-deps --ignore-installed -v --progress-bar=off -q
      - run:
          name: Cythonize code
          working_directory: /root/code
          command: |
            "${PYBIN}/pip" install cython --progress-bar=off
            cd gsd
            ${PYBIN}/python -m cython -3 -I . fl.pyx -o fl.c
            sha256sum fl.pyx | awk '{ print $1 }' > fl.pyx.sha256
      - run:
          name: Compile gsd wheels
          working_directory: /root/code
          command: |
            "${PYBIN}/python" -m pip wheel -w wheels/ . --no-deps --progress-bar=off --no-build-isolation --no-use-pep517
      - run:
          name: Audit wheels
          working_directory: /root/code
          command: |
            for whl in wheels/gsd*.whl; do
                auditwheel repair "$whl" -w dist/
            done
      - when:
          condition: << parameters.run-tests >>
          steps:
            - run:
                name: Test wheels (old numpy)
                working_directory: /root/code
                command: |
                  "${PYBIN}/pip" install pytest --progress-bar=off
                  "${PYBIN}/pip" install gsd --no-index -f dist --progress-bar=off
                  "${PYBIN}/pytest" --ignore-glob='*_largefile.py'
            - run:
                name: Test wheels (latest numpy)
                working_directory: /root/code
                command: |
                  "${PYBIN}/pip" install numpy --upgrade --progress-bar=off
                  "${PYBIN}/pip" install gsd --no-index -f dist --progress-bar=off
                  "${PYBIN}/pytest" --ignore-glob='*_largefile.py'
      - when:
          condition: << parameters.build-sdist >>
          steps:
            - run:
                name: Build sdist
                working_directory: /root/code
                command: |
                  export PYBIN=/opt/python/cp37-cp37m/bin
                  "${PYBIN}/python" setup.py sdist
      - when:
          condition: << parameters.upload-package >>
          steps:
            - run:
                name: Upload
                working_directory: /root/code
                command: |
                  export PYBIN=/opt/python/cp37-cp37m/bin
                  "${PYBIN}/pip" install twine --progress-bar=off
                  "${PYBIN}/twine" upload --username joaander --password ${PYPI_PASSWORD} dist/*
      - unless:
          condition: << parameters.upload-package >>
          steps:
            - run: echo "Branch build, skipping upload"
      - store_artifacts:
          path: /root/code/dist

workflows:
  test:
    jobs:
      - pypi-linux-wheels:
          name: wheel-build-cp35m
          python: cp35-cp35m

      - pypi-linux-wheels:
          name: wheel-build-cp36m
          python: cp36-cp36m

      - pypi-linux-wheels:
          name: wheel-build-cp37m
          python: cp37-cp37m
          build-sdist: true

  deploy:
    jobs:
      - pypi-linux-wheels:
          name: wheel-upload-cp35m
          python: cp35-cp35m
          upload-package: true
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - pypi-linux-wheels:
          name: wheel-upload-cp36m
          python: cp36-cp36m
          upload-package: true
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - pypi-linux-wheels:
          name: wheel-upload-cp37m
          python: cp37-cp37m
          build-sdist: true
          upload-package: true
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
